{"version":3,"file":"static/js/85.60205a7b.chunk.js","mappings":"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","sources":["components/button/button.styles.tsx","components/button/button.component.tsx","components/payment-form/payment-form.styles.tsx","components/payment-form/payment-form.component.tsx","utils/stripe/stripe.utils.ts","routes/payment-items/payment-item.styles.tsx","routes/payment-items/payment-items.component.tsx","routes/payment/payment.styles.tsx","routes/payment/payment.component.tsx","store/selectors/cart.selector.ts","store/selectors/user.selector.ts"],"sourcesContent":["import styled from \"styled-components/macro\";\n\nimport { SpinnerContainer } from \"../spinner/spinner.styles\";\n\nexport const BaseButton = styled.button`\n  width: 47.5%;\n  height: 45px;\n  letter-spacing: 0.5px;\n  line-height: 1rem;\n  margin-top: 0.8rem;\n  padding: 0.25rem 1rem 0.1rem 1rem;\n  font-size: 0.85rem;\n  background-color: rgb(25, 59, 25);\n  color: white;\n  opacity: 0.6;\n  text-transform: uppercase;\n  font-weight: bolder;\n  border: none;\n  border-radius: 0.75rem;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: all 200ms ease-in-out;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n    // transition: all 500ms ease-in-out;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #71a3f2;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 0.85rem;\n  height: 0.85rem;\n  margin-bottom: 0.1rem;\n  border: 3px solid #636767;\n  border-top-color: white;\n`;\n","import { FC, ReactNode, ButtonHTMLAttributes } from \"react\";\n\nimport {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n  ButtonSpinner,\n} from \"./button.styles\";\n\nexport enum BUTTON_TYPE_CLASSES {\n  base = \"base\",\n  google = \"google-sign-in\",\n  inverted = \"inverted\",\n}\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton =>\n  ({\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n  })[buttonType];\n\nexport type ButtonProps = {\n  children?: ReactNode;\n  buttonType?: BUTTON_TYPE_CLASSES;\n  isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: FC<ButtonProps> = ({\n  children,\n  buttonType,\n  isLoading,\n  ...otherProps\n}) => {\n  const CustomButton = getButton(buttonType);\n  return (\n    <CustomButton disabled={isLoading} {...otherProps}>\n      {isLoading ? <ButtonSpinner /> : children}\n    </CustomButton>\n  );\n};\n\nexport default Button;\n","import styled from \"styled-components/macro\";\n\nexport const PaymentFormContainer = styled.div`\n  width: 100%;\n  height: 30rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const FormContainer = styled.form`\n  height: 15rem;\n  min-width: 100%;\n\n  h2 {\n    margin-top: 0;\n  }\n`;\n","import { useNavigate } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { selectCurrentUser } from \"../../store/selectors/user.selector\";\n\nimport { useDispatch } from \"react-redux\";\n\nimport { clearCartItems } from \"../../store/reducers/cart.reducer\";\n\nimport { StripePaymentElementOptions } from \"@stripe/stripe-js\";\n\nimport { Dispatch, SetStateAction, FormEvent, FormEventHandler } from \"react\";\n\nimport {\n  PaymentElement,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\n\nimport { PaymentFormContainer, FormContainer } from \"./payment-form.styles\";\n\ntype PaymentFormProps = {\n  paymentLoad: Dispatch<SetStateAction<boolean>>;\n};\n\nconst PaymentForm = ({ paymentLoad }: PaymentFormProps) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const currentUser = useSelector(selectCurrentUser);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const paymentHandler: FormEventHandler = async (\n    e: FormEvent<HTMLFormElement>\n  ) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    paymentLoad(true);\n\n    const paymentResult = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        payment_method_data: {\n          billing_details: {\n            name: currentUser ? currentUser.displayName : \"Gast\",\n          },\n        },\n      },\n      redirect: \"if_required\",\n    });\n\n    if (paymentResult.error) {\n      alert(paymentResult.error);\n    } else {\n      if (paymentResult.paymentIntent.status === \"succeeded\") {\n        alert(\"Payment Successful\");\n      }\n    }\n\n    paymentLoad(false);\n\n    navigate(\"/confirmation\");\n\n    dispatch(clearCartItems());\n  };\n\n  const paymentElementOptions = {\n    layout: \"accordion\",\n  } as StripePaymentElementOptions;\n\n  return (\n    <PaymentFormContainer>\n      <FormContainer id=\"payment\" onSubmit={paymentHandler}>\n        <h2>Mit Kredit- / Debitkarte zahlen</h2>\n        <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n      </FormContainer>\n    </PaymentFormContainer>\n  );\n};\n\nexport default PaymentForm;\n","import { loadStripe } from \"@stripe/stripe-js\";\n\nexport const stripePromise = loadStripe(\n  process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY\n);\n","import styled from \"styled-components/macro\";\n\nexport const PaymentItemsContainer = styled.div`\n  padding: 1rem;\n  background-color: #fff;\n  border-radius: 1.25rem;\n`;\n\nexport const SubTotal = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1.5rem;\n`;\n\nexport const Shipment = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1.5rem;\n`;\n\nexport const Total = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 1.1rem;\n  font-weight: 700;\n`;\n","import { useSelector } from \"react-redux\";\nimport { selectCartTotal } from \"../../store/selectors/cart.selector\";\n\nimport {\n  PaymentItemsContainer,\n  SubTotal,\n  Shipment,\n  Total,\n} from \"./payment-item.styles\";\n\nconst PaymentItems = () => {\n  const cartTotal = useSelector(selectCartTotal);\n\n  return (\n    <PaymentItemsContainer>\n      <SubTotal>\n        <span>Zwischensumme</span>\n        <span>{cartTotal},00 €</span>\n      </SubTotal>\n      <Shipment>\n        <span>Lieferung</span>\n        <span>0,00 €</span>\n      </Shipment>\n      <Total>\n        <span>\n          Gesamtsumme <span>(inkl. Mwst.)</span>\n        </span>\n        <span>{cartTotal},00 €</span>\n      </Total>\n    </PaymentItemsContainer>\n  );\n};\n\nexport default PaymentItems;\n","import styled from \"styled-components/macro\";\n\nimport Button from \"../../components/button/button.component\";\n\nexport const PaymentContainer = styled.div`\n  width: 70%;\n  margin-top: 10rem;\n  margin-inline: auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"one one two\"\n    \"one one .\"\n    \"three three .\"\n    \"four four .\";\n  column-gap: 2rem;\n  row-gap: 2rem;\n\n  @media (max-width: 1700px) {\n    width: 80%;\n  }\n`;\n\nexport const PaymentFormContainer = styled.div`\n  grid-area: one;\n  background-color: #eee;\n  padding: 2rem;\n  border-radius: 2rem;\n`;\n\nexport const FormContainer = styled.form`\n  margin-top: 2rem;\n  height: 15rem;\n  min-width: 100%;\n\n  h2 {\n    margin-top: 2rem;\n  }\n`;\n\nexport const Pay = styled.div`\n  grid-area: two;\n  background-color: #eee;\n  height: auto;\n  padding: 1.25rem;\n  border-radius: 2rem;\n`;\n\nexport const PayHeading = styled.h2`\n  color: black;\n  margin-top: -0.25rem;\n  font-size: 2rem;\n`;\n\nexport const PaymentButton = styled(Button)`\n  width: 100% !important;\n  height: 1.75rem !important;\n  padding-top: 0.1rem;\n  border-radius: 1rem;\n  background: #193b19;\n  color: white;\n  opacity: 0.7 !important;\n`;\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentUser } from \"../../store/selectors/user.selector\";\nimport { selectCartTotal } from \"../../store/selectors/cart.selector\";\nimport PaymentForm from \"../../components/payment-form/payment-form.component\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { StripeElementsOptions } from \"@stripe/stripe-js\";\nimport { stripePromise } from \"../../utils/stripe/stripe.utils\";\nimport PaymentItems from \"../payment-items/payment-items.component\";\nimport { BUTTON_TYPE_CLASSES } from \"../../components/button/button.component\";\n\nimport {\n  PaymentContainer,\n  PaymentFormContainer,\n  Pay,\n  PayHeading,\n  PaymentButton,\n} from \"./payment.styles\";\n\nconst Payment = () => {\n  const [isProcessingPayment, setIsProcessingPayment] =\n    useState<boolean>(false);\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  let ignore = false;\n\n  useEffect(() => {\n    if (!ignore) {\n      fetch(\"../.netlify/functions/create-payment-intent\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ amount: amount * 100 }),\n      })\n        .then((res) => res.json())\n        .then((data) => setClientSecret(data.paymentIntent.client_secret))\n        .catch((error) => {\n          console.error(\"Error fetching client secret:\", error);\n        });\n    }\n\n    ignore = true;\n  }, []);\n\n  const appearance = {\n    theme: \"stripe\",\n  };\n\n  const options = {\n    clientSecret,\n    appearance,\n    currentUser: currentUser,\n  } as StripeElementsOptions;\n\n  return (\n    <PaymentContainer>\n      <PaymentFormContainer>\n        {clientSecret && (\n          <Elements options={options} stripe={stripePromise}>\n            <PaymentForm paymentLoad={setIsProcessingPayment} />\n          </Elements>\n        )}\n      </PaymentFormContainer>\n      <Pay>\n        <PayHeading>Gesamtsumme</PayHeading>\n        <PaymentItems />\n        <PaymentButton\n          isLoading={isProcessingPayment}\n          form=\"payment\"\n          buttonType={BUTTON_TYPE_CLASSES.base}\n        >\n          BEZAHLEN\n        </PaymentButton>\n      </Pay>\n    </PaymentContainer>\n  );\n};\n\nexport default Payment;\n","import { createSelector } from \"reselect\";\n\nimport { RootState } from \"../store\";\n\nimport { CartState } from \"../reducers/cart.reducer\";\n\nconst selectCartReducer = (state: RootState): CartState => state.cart;\n\nexport const selectIsCartOpen = createSelector(\n  [selectCartReducer],\n  (cart: CartState) => cart.isCartOpen\n);\n\nexport const selectCartItems = createSelector(\n  [selectCartReducer],\n  (cart: CartState) => cart.cartItems\n);\n\nexport const selectCartCount = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0)\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (total, cartItem) => total + cartItem.price * cartItem.quantity,\n    0\n  )\n);\n","import { createSelector } from \"reselect\";\n\nimport { RootState } from \"../store\";\n\nimport { UserState } from \"../reducers/user.reducer\";\n\nexport const selectUserReducer = (state: RootState): UserState => state.user;\n\nexport const selectCurrentUser = createSelector(\n  selectUserReducer,\n  (user) => user.currentUser\n);\n"],"names":["BaseButton","styled","displayName","componentId","GoogleSignInButton","withConfig","InvertedButton","ButtonSpinner","SpinnerContainer","BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","_objectWithoutProperties","_excluded","CustomButton","_BUTTON_TYPE_CLASSES$","arguments","length","undefined","base","_defineProperty","google","inverted","getButton","_jsx","_objectSpread","disabled","PaymentFormContainer","FormContainer","paymentLoad","stripe","useStripe","elements","useElements","currentUser","useSelector","selectCurrentUser","navigate","useNavigate","dispatch","useDispatch","paymentHandler","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","paymentResult","wrap","_context","prev","next","preventDefault","abrupt","confirmPayment","confirmParams","payment_method_data","billing_details","name","redirect","sent","error","alert","paymentIntent","status","clearCartItems","stop","_x","apply","_jsxs","id","onSubmit","PaymentElement","options","layout","stripePromise","loadStripe","process","PaymentItemsContainer","SubTotal","Shipment","Total","cartTotal","selectCartTotal","PaymentContainer","Pay","PayHeading","PaymentButton","Button","_useState","useState","_useState2","_slicedToArray","isProcessingPayment","setIsProcessingPayment","amount","_useState3","_useState4","clientSecret","setClientSecret","ignore","useEffect","fetch","method","headers","body","JSON","stringify","then","res","json","data","client_secret","catch","console","appearance","theme","Elements","PaymentForm","PaymentItems","form","selectCartReducer","state","cart","selectIsCartOpen","createSelector","isCartOpen","selectCartItems","cartItems","selectCartCount","reduce","total","cartItem","quantity","price","user"],"sourceRoot":""}